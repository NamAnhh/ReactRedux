{"ast":null,"code":"// setting: folder (actions[studentACtions], components[studentLists], reducers[rootReducer, studentReducer], store.js, index.js), \n//npm install redux react-redux redux-thunk --save\n//defind: type\nexport const FETCH_STUDENT_BEGIN = 'FETCH_STUDENT_BEGIN';\nexport const FETCH_STUDENT_SUCCESS = 'FETCH_STUDENT_SUCCESS';\nexport const FETCH_STUDENT_FAILURE = 'FETCH_STUDENT_FAILURE';\nexport const fetchStudentBegin = () => ({\n  type: FETCH_STUDENT_BEGIN\n});\nexport const fetchStudentSuccess = data => ({\n  type: FETCH_STUDENT_SUCCESS,\n  payload: data\n});\nexport const fetchStudentFailure = error => ({\n  type: FETCH_STUDENT_FAILURE,\n  payload: error\n}); //export fetchStudent cho studentlist (mapDispatchToProps)\n//fetch API -> json.data là: req.body.data (nodeJs)\n\nexport const fetchStudent = () => {\n  return dispatch => {\n    dispatch(fetchStudentBegin());\n    return fetch(\"http://localhost:4500/api/students\").then(handleErrors).then(res => res.json()).then(json => {\n      dispatch(fetchStudentSuccess(json.data));\n      console.log('josn.data', json);\n      return json.data;\n    }).catch(error => dispatch(fetchStudentFailure(error)));\n  };\n}; // Handle HTTP errors since fetch won't.\n\nfunction handleErrors(response) {\n  if (!response.ok) {\n    throw Error(response.statusText);\n  }\n\n  return response;\n}","map":{"version":3,"sources":["C:\\SourceDoAnTotNghiep\\ReactRedux\\src\\actions\\studentAction.js"],"names":["FETCH_STUDENT_BEGIN","FETCH_STUDENT_SUCCESS","FETCH_STUDENT_FAILURE","fetchStudentBegin","type","fetchStudentSuccess","data","payload","fetchStudentFailure","error","fetchStudent","dispatch","fetch","then","handleErrors","res","json","console","log","catch","response","ok","Error","statusText"],"mappings":"AAAA;AACA;AAEA;AACA,OAAO,MAAMA,mBAAmB,GAAK,qBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAGP,OAAO,MAAMC,iBAAiB,GAAG,OAAO;AACtCC,EAAAA,IAAI,EAAEJ;AADgC,CAAP,CAA1B;AAIP,OAAO,MAAMK,mBAAmB,GAAIC,IAAD,KAAW;AAC5CF,EAAAA,IAAI,EAAEH,qBADsC;AAE5CM,EAAAA,OAAO,EAAED;AAFmC,CAAX,CAA5B;AAKP,OAAO,MAAME,mBAAmB,GAAIC,KAAD,KAAY;AAC7CL,EAAAA,IAAI,EAAEF,qBADuC;AAE7CK,EAAAA,OAAO,EAAEE;AAFoC,CAAZ,CAA5B,C,CAMP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAOC,QAAQ,IAAI;AACjBA,IAAAA,QAAQ,CAACR,iBAAiB,EAAlB,CAAR;AACA,WAAOS,KAAK,CAAC,oCAAD,CAAL,CACJC,IADI,CACCC,YADD,EAEJD,IAFI,CAECE,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAFR,EAGJH,IAHI,CAGCG,IAAI,IAAI;AACZL,MAAAA,QAAQ,CAACN,mBAAmB,CAACW,IAAI,CAACV,IAAN,CAApB,CAAR;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAzB;AACA,aAAOA,IAAI,CAACV,IAAZ;AACD,KAPI,EAQJa,KARI,CAQEV,KAAK,IAAIE,QAAQ,CAACH,mBAAmB,CAACC,KAAD,CAApB,CARnB,CAAP;AASD,GAXD;AAYD,CAbI,C,CAeL;;AACA,SAASK,YAAT,CAAsBM,QAAtB,EAAgC;AAC9B,MAAI,CAACA,QAAQ,CAACC,EAAd,EAAkB;AAChB,UAAMC,KAAK,CAACF,QAAQ,CAACG,UAAV,CAAX;AACD;;AACD,SAAOH,QAAP;AACD","sourcesContent":["// setting: folder (actions[studentACtions], components[studentLists], reducers[rootReducer, studentReducer], store.js, index.js), \r\n//npm install redux react-redux redux-thunk --save\r\n\r\n//defind: type\r\nexport const FETCH_STUDENT_BEGIN   = 'FETCH_STUDENT_BEGIN';\r\nexport const FETCH_STUDENT_SUCCESS = 'FETCH_STUDENT_SUCCESS';\r\nexport const FETCH_STUDENT_FAILURE = 'FETCH_STUDENT_FAILURE';\r\n\r\n\r\nexport const fetchStudentBegin = () => ({\r\n  type: FETCH_STUDENT_BEGIN\r\n});\r\n\r\nexport const fetchStudentSuccess = (data) => ({\r\n  type: FETCH_STUDENT_SUCCESS,\r\n  payload: data \r\n});\r\n\r\nexport const fetchStudentFailure = (error) => ({\r\n  type: FETCH_STUDENT_FAILURE,\r\n  payload: error \r\n});\r\n\r\n\r\n//export fetchStudent cho studentlist (mapDispatchToProps)\r\n//fetch API -> json.data là: req.body.data (nodeJs)\r\nexport const fetchStudent = () => {\r\n    return dispatch => {\r\n      dispatch(fetchStudentBegin());\r\n      return fetch(\"http://localhost:4500/api/students\")\r\n        .then(handleErrors)\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          dispatch(fetchStudentSuccess(json.data));\r\n          console.log('josn.data', json)\r\n          return json.data;\r\n        })\r\n        .catch(error => dispatch(fetchStudentFailure(error)));\r\n    };\r\n  }\r\n  \r\n  // Handle HTTP errors since fetch won't.\r\n  function handleErrors(response) {\r\n    if (!response.ok) {\r\n      throw Error(response.statusText);\r\n    }\r\n    return response;\r\n  }"]},"metadata":{},"sourceType":"module"}